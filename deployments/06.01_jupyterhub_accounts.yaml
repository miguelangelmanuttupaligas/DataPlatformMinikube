# ServiceAccount para el pod del JupyterHub (hub)
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jupyterhub-sa
  namespace: jupyterhub
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jupyterhub-sa-binding
  namespace: jupyterhub
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: view
subjects:
  - kind: ServiceAccount
    name: jupyterhub-sa
    namespace: jupyterhub

---
# ServiceAccount para Spark en singleuser pods
apiVersion: v1
kind: ServiceAccount
metadata:
  name: spark-sa-jupyterhub
  namespace: jupyterhub
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: spark-driver-role-jupyterhub
  namespace: jupyterhub
rules:
  # Pods: crear driver/exec, listar, eliminar y limpiar al final
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["create", "get", "list", "watch", "delete","deletecollection"]
  # Logs de los pods
  - apiGroups: [""]
    resources: ["pods/log"]
    verbs: ["get", "list"]
  # Services del driver (Spark crea y luego limpia por labelSelector)
  - apiGroups: [""]
    resources: ["services"]
    verbs: ["create", "get", "list", "watch", "delete", "deletecollection", "patch", "update"]
  # Endpoints (cuando Spark registra driver service)
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["create", "get", "list", "watch", "delete"]
  # ConfigMaps y Secrets (Spark los usa para pasar configuración/envs)
  - apiGroups: [""]
    resources: ["configmaps", "secrets"]
    verbs: ["create", "get", "list", "watch", "delete","deletecollection", "patch", "update"]
  # PVCs (solo si realmente tus jobs Spark montan volúmenes)
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["create", "get", "list", "delete","deletecollection"]
  # ServiceAccounts (solo lectura, Spark necesita mirar el token de ejecución)
  - apiGroups: [""]
    resources: ["serviceaccounts"]
    verbs: ["get", "list"]
  # Jobs batch (si usas SparkSubmit con KubernetesOperator que cree Jobs)
  - apiGroups: ["batch"]
    resources: ["jobs"]
    verbs: ["create", "get", "list", "delete"]
  # (Opcional, útil si accedes a la UI vía proxy del Service)
  - apiGroups: [""]
    resources: ["services/proxy"]
    verbs: ["get", "list"]
  # (Opcional) Events para mejor observabilidad
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: spark-driver-binding-jupyterhub
  namespace: jupyterhub
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: spark-driver-role-jupyterhub
subjects:
  - kind: ServiceAccount
    name: spark-sa-jupyterhub
    namespace: jupyterhub

# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRole
# metadata:
#   name: spark-driver-role-jupyterhub
# rules:
#   - apiGroups: [""]
#     resources: ["pods", "services", "endpoints", "persistentvolumeclaims", "configmaps", "secrets"]
#     verbs: ["create", "get", "list", "watch", "delete", "deletecollection"]
#   - apiGroups: ["batch"]
#     resources: ["jobs"]
#     verbs: ["create", "get", "list", "delete"]
#   - apiGroups: [""]  # Para ver logs del Spark driver
#     resources: ["pods/log"]
#     verbs: ["get", "list"]
#   - apiGroups: ["apps"]
#     resources: ["deployments"]
#     verbs: ["create", "get", "list", "delete"]
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRoleBinding
# metadata:
#   name: spark-driver-binding-jupyterhub
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: ClusterRole
#   name: spark-driver-role-jupyterhub
# subjects:
#   - kind: ServiceAccount
#     name: spark-sa-jupyterhub
#     namespace: jupyterhub